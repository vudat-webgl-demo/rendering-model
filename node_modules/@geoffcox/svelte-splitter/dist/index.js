(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Splitter = {}));
}(this, (function (exports) { 'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
        const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    // unfortunately this can't be a constant as that wouldn't be tree-shakeable
    // so we cache the result instead
    let crossorigin;
    function is_crossorigin() {
        if (crossorigin === undefined) {
            crossorigin = false;
            try {
                if (typeof window !== 'undefined' && window.parent) {
                    void window.parent.document;
                }
            }
            catch (error) {
                crossorigin = true;
            }
        }
        return crossorigin;
    }
    function add_resize_listener(node, fn) {
        const computed_style = getComputedStyle(node);
        if (computed_style.position === 'static') {
            node.style.position = 'relative';
        }
        const iframe = element('iframe');
        iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
            'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');
        iframe.setAttribute('aria-hidden', 'true');
        iframe.tabIndex = -1;
        const crossorigin = is_crossorigin();
        let unsubscribe;
        if (crossorigin) {
            iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
            unsubscribe = listen(window, 'message', (event) => {
                if (event.source === iframe.contentWindow)
                    fn();
            });
        }
        else {
            iframe.src = 'about:blank';
            iframe.onload = () => {
                unsubscribe = listen(iframe.contentWindow, 'resize', fn);
            };
        }
        append(node, iframe);
        return () => {
            if (crossorigin) {
                unsubscribe();
            }
            else if (unsubscribe && iframe.contentWindow) {
                unsubscribe();
            }
            detach(iframe);
        };
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : options.context || []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    /**
     * The context key for custom splitter components to use to get state from the Split parent component.
     */
    const splitterContextKey = { name: 'SplitterContext' };

    /* src\DefaultSplitter.svelte generated by Svelte v3.37.0 */

    function create_fragment$1(ctx) {
    	let div1;
    	let div0;
    	let div1_class_value;
    	let div1_resize_listener;

    	return {
    		c() {
    			div1 = element("div");
    			div0 = element("div");
    			attr(div0, "class", "line svelte-16wga0t");
    			attr(div0, "style", /*lineStyle*/ ctx[2]);
    			attr(div1, "class", div1_class_value = "" + (null_to_empty(/*splitterClass*/ ctx[3]) + " svelte-16wga0t"));
    			attr(div1, "tabindex", "0");
    			add_render_callback(() => /*div1_elementresize_handler*/ ctx[13].call(div1));
    		},
    		m(target, anchor) {
    			insert(target, div1, anchor);
    			append(div1, div0);
    			div1_resize_listener = add_resize_listener(div1, /*div1_elementresize_handler*/ ctx[13].bind(div1));
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*lineStyle*/ 4) {
    				attr(div0, "style", /*lineStyle*/ ctx[2]);
    			}

    			if (dirty & /*splitterClass*/ 8 && div1_class_value !== (div1_class_value = "" + (null_to_empty(/*splitterClass*/ ctx[3]) + " svelte-16wga0t"))) {
    				attr(div1, "class", div1_class_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div1);
    			div1_resize_listener();
    		}
    	};
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let dragging;
    	let horizontal;
    	let clientSize;
    	let lineStyles;
    	let lineStyle;
    	let splitterClass;
    	let $splitterContext;
    	
    	let { color = "silver" } = $$props;
    	let { hoverColor = "gray" } = $$props;
    	let { dragColor = "black" } = $$props;
    	let splitterContext = getContext(splitterContextKey);
    	component_subscribe($$self, splitterContext, value => $$invalidate(9, $splitterContext = value));
    	let clientWidth;
    	let clientHeight;

    	function div1_elementresize_handler() {
    		clientWidth = this.clientWidth;
    		clientHeight = this.clientHeight;
    		$$invalidate(0, clientWidth);
    		$$invalidate(1, clientHeight);
    	}

    	$$self.$$set = $$props => {
    		if ("color" in $$props) $$invalidate(5, color = $$props.color);
    		if ("hoverColor" in $$props) $$invalidate(6, hoverColor = $$props.hoverColor);
    		if ("dragColor" in $$props) $$invalidate(7, dragColor = $$props.dragColor);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$splitterContext*/ 512) {
    			$$invalidate(8, dragging = $splitterContext.dragging);
    		}

    		if ($$self.$$.dirty & /*$splitterContext*/ 512) {
    			$$invalidate(10, horizontal = $splitterContext.horizontal);
    		}

    		if ($$self.$$.dirty & /*horizontal, clientHeight, clientWidth*/ 1027) {
    			$$invalidate(11, clientSize = horizontal ? clientHeight : clientWidth);
    		}

    		if ($$self.$$.dirty & /*clientSize, dragging, dragColor, color, hoverColor*/ 2528) {
    			$$invalidate(12, lineStyles = {
    				"--splitter-line-margin": `${Math.max(0, Math.floor(clientSize / 2) - 1)}px`,
    				"--splitter-line-size": `${clientSize % 2 === 0 ? 2 : 3}px`,
    				"--splitter-line-color": dragging ? dragColor : color,
    				"--splitter-line-hover-color": dragging ? dragColor : hoverColor
    			});
    		}

    		if ($$self.$$.dirty & /*lineStyles*/ 4096) {
    			$$invalidate(2, lineStyle = Object.entries(lineStyles).map(([key, value]) => `${key}:${value}`).join(";"));
    		}

    		if ($$self.$$.dirty & /*horizontal*/ 1024) {
    			$$invalidate(3, splitterClass = horizontal ? "splitter horizontal" : "splitter vertical");
    		}
    	};

    	return [
    		clientWidth,
    		clientHeight,
    		lineStyle,
    		splitterClass,
    		splitterContext,
    		color,
    		hoverColor,
    		dragColor,
    		dragging,
    		$splitterContext,
    		horizontal,
    		clientSize,
    		lineStyles,
    		div1_elementresize_handler
    	];
    }

    class DefaultSplitter extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { color: 5, hoverColor: 6, dragColor: 7 });
    	}
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    /* src\Split.svelte generated by Svelte v3.37.0 */
    const get_secondary_slot_changes = dirty => ({});
    const get_secondary_slot_context = ctx => ({});
    const get_splitter_slot_changes = dirty => ({});
    const get_splitter_slot_context = ctx => ({});
    const get_primary_slot_changes = dirty => ({});
    const get_primary_slot_context = ctx => ({});

    // (187:26)         
    function fallback_block(ctx) {
    	let defaultsplitter;
    	let current;
    	defaultsplitter = new DefaultSplitter({});

    	return {
    		c() {
    			create_component(defaultsplitter.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(defaultsplitter, target, anchor);
    			current = true;
    		},
    		i(local) {
    			if (current) return;
    			transition_in(defaultsplitter.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(defaultsplitter.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(defaultsplitter, detaching);
    		}
    	};
    }

    function create_fragment(ctx) {
    	let div3;
    	let div0;
    	let div0_resize_listener;
    	let t0;
    	let div1;
    	let div1_resize_listener;
    	let t1;
    	let div2;
    	let div2_resize_listener;
    	let div3_class_value;
    	let div3_resize_listener;
    	let current;
    	let mounted;
    	let dispose;
    	const primary_slot_template = /*#slots*/ ctx[33].primary;
    	const primary_slot = create_slot(primary_slot_template, ctx, /*$$scope*/ ctx[32], get_primary_slot_context);
    	const splitter_slot_template = /*#slots*/ ctx[33].splitter;
    	const splitter_slot = create_slot(splitter_slot_template, ctx, /*$$scope*/ ctx[32], get_splitter_slot_context);
    	const splitter_slot_or_fallback = splitter_slot || fallback_block();
    	const secondary_slot_template = /*#slots*/ ctx[33].secondary;
    	const secondary_slot = create_slot(secondary_slot_template, ctx, /*$$scope*/ ctx[32], get_secondary_slot_context);

    	return {
    		c() {
    			div3 = element("div");
    			div0 = element("div");
    			if (primary_slot) primary_slot.c();
    			t0 = space();
    			div1 = element("div");
    			if (splitter_slot_or_fallback) splitter_slot_or_fallback.c();
    			t1 = space();
    			div2 = element("div");
    			if (secondary_slot) secondary_slot.c();
    			attr(div0, "class", "primary svelte-603y9m");
    			add_render_callback(() => /*div0_elementresize_handler*/ ctx[34].call(div0));
    			attr(div1, "class", "splitter svelte-603y9m");
    			add_render_callback(() => /*div1_elementresize_handler*/ ctx[35].call(div1));
    			attr(div2, "class", "secondary svelte-603y9m");
    			add_render_callback(() => /*div2_elementresize_handler*/ ctx[36].call(div2));
    			attr(div3, "class", div3_class_value = "" + (null_to_empty(/*splitClass*/ ctx[9]) + " svelte-603y9m"));
    			attr(div3, "style", /*splitStyle*/ ctx[8]);
    			add_render_callback(() => /*div3_elementresize_handler*/ ctx[37].call(div3));
    		},
    		m(target, anchor) {
    			insert(target, div3, anchor);
    			append(div3, div0);

    			if (primary_slot) {
    				primary_slot.m(div0, null);
    			}

    			div0_resize_listener = add_resize_listener(div0, /*div0_elementresize_handler*/ ctx[34].bind(div0));
    			append(div3, t0);
    			append(div3, div1);

    			if (splitter_slot_or_fallback) {
    				splitter_slot_or_fallback.m(div1, null);
    			}

    			div1_resize_listener = add_resize_listener(div1, /*div1_elementresize_handler*/ ctx[35].bind(div1));
    			append(div3, t1);
    			append(div3, div2);

    			if (secondary_slot) {
    				secondary_slot.m(div2, null);
    			}

    			div2_resize_listener = add_resize_listener(div2, /*div2_elementresize_handler*/ ctx[36].bind(div2));
    			div3_resize_listener = add_resize_listener(div3, /*div3_elementresize_handler*/ ctx[37].bind(div3));
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen(div1, "pointerdown", /*onPointerDown*/ ctx[10]),
    					listen(div1, "pointermove", /*onPointerMove*/ ctx[11]),
    					listen(div1, "pointerup", /*onPointerUp*/ ctx[12]),
    					listen(div1, "dblclick", /*onDoubleClick*/ ctx[13]),
    					listen(div1, "keydown", /*onKeyDown*/ ctx[14])
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, dirty) {
    			if (primary_slot) {
    				if (primary_slot.p && dirty[1] & /*$$scope*/ 2) {
    					update_slot(primary_slot, primary_slot_template, ctx, /*$$scope*/ ctx[32], dirty, get_primary_slot_changes, get_primary_slot_context);
    				}
    			}

    			if (splitter_slot) {
    				if (splitter_slot.p && dirty[1] & /*$$scope*/ 2) {
    					update_slot(splitter_slot, splitter_slot_template, ctx, /*$$scope*/ ctx[32], dirty, get_splitter_slot_changes, get_splitter_slot_context);
    				}
    			}

    			if (secondary_slot) {
    				if (secondary_slot.p && dirty[1] & /*$$scope*/ 2) {
    					update_slot(secondary_slot, secondary_slot_template, ctx, /*$$scope*/ ctx[32], dirty, get_secondary_slot_changes, get_secondary_slot_context);
    				}
    			}

    			if (!current || dirty[0] & /*splitClass*/ 512 && div3_class_value !== (div3_class_value = "" + (null_to_empty(/*splitClass*/ ctx[9]) + " svelte-603y9m"))) {
    				attr(div3, "class", div3_class_value);
    			}

    			if (!current || dirty[0] & /*splitStyle*/ 256) {
    				attr(div3, "style", /*splitStyle*/ ctx[8]);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(primary_slot, local);
    			transition_in(splitter_slot_or_fallback, local);
    			transition_in(secondary_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(primary_slot, local);
    			transition_out(splitter_slot_or_fallback, local);
    			transition_out(secondary_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div3);
    			if (primary_slot) primary_slot.d(detaching);
    			div0_resize_listener();
    			if (splitter_slot_or_fallback) splitter_slot_or_fallback.d(detaching);
    			div1_resize_listener();
    			if (secondary_slot) secondary_slot.d(detaching);
    			div2_resize_listener();
    			div3_resize_listener();
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    function instance($$self, $$props, $$invalidate) {
    	let clientSize;
    	let primaryClientSize;
    	let splitterClientSize;
    	let secondaryClientSize;
    	let measuredPercent;
    	let primarySize;
    	let splitCssVars;
    	let splitStyle;
    	let splitClass;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	let { horizontal = false } = $$props;
    	let { initialPrimarySize = "50%" } = $$props;
    	let { minPrimarySize = "0" } = $$props;
    	let { minSecondarySize = "0" } = $$props;
    	let { splitterSize = "7px" } = $$props;
    	let { resetOnDoubleClick = true } = $$props;

    	// ----- Size tracking ----- //
    	let clientWidth;

    	let clientHeight;
    	let primaryClientWidth;
    	let primaryClientHeight;
    	let splitterClientWidth;
    	let splitterClientHeight;
    	let secondaryClientWidth;
    	let secondaryClientHeight;

    	const constrainPercent = value => {
    		return Math.max(0, Math.min(value, 100));
    	};

    	let percent = undefined;

    	// ----- Drag tracking ----- //
    	let startPosition;

    	let startPrimarySize;
    	let dragging = false;

    	const getPercent = () => {
    		return measuredPercent;
    	};

    	const setPercent = value => {
    		$$invalidate(23, percent = constrainPercent(value));
    	};

    	// ----- Splitter Context -----//
    	const splitterContext = writable({ horizontal, dragging });

    	setContext(splitterContextKey, splitterContext);

    	// ----- Events ----- //
    	const dispatch = createEventDispatcher();

    	// ----- Event handlers ----- //
    	const onPointerDown = event => {
    		event.currentTarget.setPointerCapture(event.pointerId);
    		startPosition = horizontal ? event.clientY : event.clientX;
    		startPrimarySize = primaryClientSize;
    		$$invalidate(24, dragging = true);
    	};

    	const onPointerMove = event => {
    		if (event.currentTarget.hasPointerCapture(event.pointerId)) {
    			const position = horizontal ? event.clientY : event.clientX;
    			let newPrimarySize = startPrimarySize + (position - startPosition);
    			newPrimarySize = Math.max(0, Math.min(newPrimarySize, clientSize));
    			const newPercent = newPrimarySize / clientSize * 100;
    			$$invalidate(23, percent = newPercent);
    		}
    	};

    	const onPointerUp = event => {
    		event.currentTarget.releasePointerCapture(event.pointerId);
    		$$invalidate(24, dragging = false);
    	};

    	const onDoubleClick = () => {
    		resetOnDoubleClick && $$invalidate(23, percent = undefined);
    	};

    	const onKeyDown = event => {
    		const origPercent = percent || measuredPercent;

    		// only move for vanilla keys
    		if (!event.ctrlKey && !event.shiftKey && !event.altKey) {
    			switch (event.code) {
    				case "Space":
    					$$invalidate(23, percent = undefined);
    					return;
    			}

    			if (horizontal) {
    				switch (event.code) {
    					case "ArrowUp":
    						$$invalidate(23, percent = constrainPercent(origPercent - 1));
    						return;
    					case "ArrowDown":
    						$$invalidate(23, percent = constrainPercent(origPercent + 1));
    						return;
    				}
    			} else {
    				switch (event.code) {
    					case "ArrowLeft":
    						$$invalidate(23, percent = constrainPercent(origPercent - 1));
    						return;
    					case "ArrowRight":
    						$$invalidate(23, percent = constrainPercent(origPercent + 1));
    						return;
    				}
    			}
    		}
    	};

    	function div0_elementresize_handler() {
    		primaryClientWidth = this.clientWidth;
    		primaryClientHeight = this.clientHeight;
    		$$invalidate(2, primaryClientWidth);
    		$$invalidate(3, primaryClientHeight);
    	}

    	function div1_elementresize_handler() {
    		splitterClientWidth = this.clientWidth;
    		splitterClientHeight = this.clientHeight;
    		$$invalidate(4, splitterClientWidth);
    		$$invalidate(5, splitterClientHeight);
    	}

    	function div2_elementresize_handler() {
    		secondaryClientWidth = this.clientWidth;
    		secondaryClientHeight = this.clientHeight;
    		$$invalidate(6, secondaryClientWidth);
    		$$invalidate(7, secondaryClientHeight);
    	}

    	function div3_elementresize_handler() {
    		clientWidth = this.clientWidth;
    		clientHeight = this.clientHeight;
    		$$invalidate(0, clientWidth);
    		$$invalidate(1, clientHeight);
    	}

    	$$self.$$set = $$props => {
    		if ("horizontal" in $$props) $$invalidate(15, horizontal = $$props.horizontal);
    		if ("initialPrimarySize" in $$props) $$invalidate(16, initialPrimarySize = $$props.initialPrimarySize);
    		if ("minPrimarySize" in $$props) $$invalidate(17, minPrimarySize = $$props.minPrimarySize);
    		if ("minSecondarySize" in $$props) $$invalidate(18, minSecondarySize = $$props.minSecondarySize);
    		if ("splitterSize" in $$props) $$invalidate(19, splitterSize = $$props.splitterSize);
    		if ("resetOnDoubleClick" in $$props) $$invalidate(20, resetOnDoubleClick = $$props.resetOnDoubleClick);
    		if ("$$scope" in $$props) $$invalidate(32, $$scope = $$props.$$scope);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*horizontal, clientHeight, clientWidth*/ 32771) {
    			$$invalidate(25, clientSize = horizontal ? clientHeight : clientWidth);
    		}

    		if ($$self.$$.dirty[0] & /*horizontal, primaryClientHeight, primaryClientWidth*/ 32780) {
    			$$invalidate(26, primaryClientSize = horizontal ? primaryClientHeight : primaryClientWidth);
    		}

    		if ($$self.$$.dirty[0] & /*horizontal, splitterClientHeight, splitterClientWidth*/ 32816) {
    			$$invalidate(27, splitterClientSize = horizontal ? splitterClientHeight : splitterClientWidth);
    		}

    		if ($$self.$$.dirty[0] & /*horizontal, secondaryClientHeight, secondaryClientWidth*/ 32960) {
    			$$invalidate(28, secondaryClientSize = horizontal
    			? secondaryClientHeight
    			: secondaryClientWidth);
    		}

    		if ($$self.$$.dirty[0] & /*primaryClientSize, splitterClientSize, clientSize*/ 234881024) {
    			$$invalidate(29, measuredPercent = constrainPercent(Math.ceil((primaryClientSize - splitterClientSize) / (clientSize - splitterClientSize) * 100)));
    		}

    		if ($$self.$$.dirty[0] & /*horizontal, dragging*/ 16809984) {
    			{
    				splitterContext.set({ horizontal, dragging });
    			}
    		}

    		if ($$self.$$.dirty[0] & /*measuredPercent, primaryClientSize, splitterClientSize, secondaryClientSize, dragging*/ 1023410176) {
    			dispatch("changed", {
    				percent: measuredPercent,
    				primarySize: primaryClientSize,
    				splitterSize: splitterClientSize,
    				secondarySize: secondaryClientSize,
    				dragging
    			});
    		}

    		if ($$self.$$.dirty[0] & /*percent, initialPrimarySize*/ 8454144) {
    			// ----- Dynamic styles ----- //
    			$$invalidate(30, primarySize = percent !== undefined
    			? `${percent}%`
    			: initialPrimarySize);
    		}

    		if ($$self.$$.dirty[0] & /*primarySize, minPrimarySize, minSecondarySize, splitterSize*/ 1074659328) {
    			$$invalidate(31, splitCssVars = {
    				"--primary-size": `${primarySize}`,
    				"--min-primary-size": `${minPrimarySize}`,
    				"--min-secondary-size": `${minSecondarySize}`,
    				"--splitter-size": `${splitterSize}`
    			});
    		}

    		if ($$self.$$.dirty[1] & /*splitCssVars*/ 1) {
    			$$invalidate(8, splitStyle = Object.entries(splitCssVars).map(([key, value]) => `${key}:${value}`).join(";"));
    		}

    		if ($$self.$$.dirty[0] & /*horizontal*/ 32768) {
    			$$invalidate(9, splitClass = horizontal ? "split horizontal" : "split vertical");
    		}
    	};

    	return [
    		clientWidth,
    		clientHeight,
    		primaryClientWidth,
    		primaryClientHeight,
    		splitterClientWidth,
    		splitterClientHeight,
    		secondaryClientWidth,
    		secondaryClientHeight,
    		splitStyle,
    		splitClass,
    		onPointerDown,
    		onPointerMove,
    		onPointerUp,
    		onDoubleClick,
    		onKeyDown,
    		horizontal,
    		initialPrimarySize,
    		minPrimarySize,
    		minSecondarySize,
    		splitterSize,
    		resetOnDoubleClick,
    		getPercent,
    		setPercent,
    		percent,
    		dragging,
    		clientSize,
    		primaryClientSize,
    		splitterClientSize,
    		secondaryClientSize,
    		measuredPercent,
    		primarySize,
    		splitCssVars,
    		$$scope,
    		slots,
    		div0_elementresize_handler,
    		div1_elementresize_handler,
    		div2_elementresize_handler,
    		div3_elementresize_handler
    	];
    }

    class Split extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(
    			this,
    			options,
    			instance,
    			create_fragment,
    			safe_not_equal,
    			{
    				horizontal: 15,
    				initialPrimarySize: 16,
    				minPrimarySize: 17,
    				minSecondarySize: 18,
    				splitterSize: 19,
    				resetOnDoubleClick: 20,
    				getPercent: 21,
    				setPercent: 22
    			},
    			[-1, -1]
    		);
    	}

    	get getPercent() {
    		return this.$$.ctx[21];
    	}

    	get setPercent() {
    		return this.$$.ctx[22];
    	}
    }

    exports.DefaultSplitter = DefaultSplitter;
    exports.Split = Split;
    exports.splitterContextKey = splitterContextKey;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
